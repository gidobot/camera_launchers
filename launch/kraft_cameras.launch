<launch>
  <!-- Common parameters -->
  <arg name="camera_name" default="camera" />

  <arg name="left_camera_serial" default="17273499" />
  <arg name="left_camera_calibrated" default="1" />

  <arg name="right_camera_serial" default="17273549" />
  <arg name="right_camera_calibrated" default="1" />

  <arg name="fisheye_camera_serial" default="16484868" />
  <arg name="fisheye_camera_calibrated" default="0" />

  <group ns="$(arg camera_name)" >
    <group ns="left" >
      <node pkg="nodelet" type="nodelet" name="camera_nodelet_manager" args="manager" />

      <!-- Both cameras are not loaded into one nodelet manager to avoid the namespacing issue. -->
      <node pkg="nodelet" type="nodelet" name="camera_nodelet"
            args="load pointgrey_camera_driver/PointGreyCameraNodelet camera_nodelet_manager" >
        <rosparam command="load" file="$(find camera_launchers)/cfg/left.yaml" />

        <param name="frame_id" value="CameraLeft" />

        <!-- When unspecified, the driver will use the default framerate as given by the
             camera itself. Use this parameter to override that value for cameras capable of
             other framerates. -->

        <!-- Use the camera_calibration package to create this file -->
        <!-- <praam name="camera_info_url" if="$(arg left_camera_calibrated)"
               value="$(find camera_launchers)/cfg/camera_info_left.yaml" /> -->
      </node>

      <node pkg="nodelet" type="nodelet" name="image_proc_debayer"
          args="load image_proc/debayer camera_nodelet_manager">
      </node>

      <node pkg="image_view" type="image_view" name="left" args="image:=image_raw" />
    </group>

    <group ns="right" >
      <node pkg="nodelet" type="nodelet" name="camera_nodelet_manager" args="manager" />

      <node pkg="nodelet" type="nodelet" name="camera_nodelet"
            args="load pointgrey_camera_driver/PointGreyCameraNodelet camera_nodelet_manager" >
        <rosparam command="load" file="$(find camera_launchers)/cfg/right.yaml" />

        <param name="frame_id" value="CameraRight" />

        <!-- When unspecified, the driver will use the default framerate as given by the
             camera itself. Use this parameter to override that value for cameras capable of
             other framerates. -->

        <!-- Use the camera_calibration package to create this file -->
        <!-- <param name="camera_info_url" if="$(arg right_camera_calibrated)"
               value="$(find camera_launchers)/cfg/camera_info_right.yaml" /> -->
      </node>

      <node pkg="nodelet" type="nodelet" name="image_proc_debayer"
          args="load image_proc/debayer camera_nodelet_manager">
      </node>

      <node pkg="image_view" type="image_view" name="right" args="image:=image_raw" />
    </group>

    <group ns="fisheye" >
      <node pkg="nodelet" type="nodelet" name="camera_nodelet_manager" args="manager" />

      <node pkg="nodelet" type="nodelet" name="camera_nodelet"
            args="load pointgrey_camera_driver/PointGreyCameraNodelet camera_nodelet_manager" >
        <rosparam command="load" file="$(find camera_launchers)/cfg/fisheye.yaml" />

        <param name="frame_id" value="CameraFisheye" />

        <!-- When unspecified, the driver will use the default framerate as given by the
             camera itself. Use this parameter to override that value for cameras capable of
             other framerates. -->

        <!-- Use the camera_calibration package to create this file -->
        <!-- <param name="camera_info_url" if="$(arg fisheye_camera_calibrated)"
               value="file://$(env HOME)/.ros/camera_info/$(arg fisheye_camera_serial).yaml" /> -->
      </node>

      <node pkg="nodelet" type="nodelet" name="image_proc_debayer"
          args="load image_proc/debayer camera_nodelet_manager">
      </node>

      <node pkg="image_view" type="image_view" name="fisheye" args="image:=image_raw" />
    </group>

    <node pkg="stereo_image_proc" type="stereo_image_proc" name="stereo_image_proc">
      <param name="approximate_sync" value="true"/>
      <rosparam command="load" file="$(find camera_launchers)/cfg/stereo_proc_config.yaml" />
    </node>

    <!-- Static tf's -->
    <!-- <node pkg="tf2_ros" type="static_transform_publisher" name="cam_left_tf_broadcaster"
      args="1.38692360 -0.04542874 0.98431998 0.50060862 0.78725068 -0.31436865 -0.17549846 Optitracks CameraLeft" /> -->

    <node pkg="tf" type="static_transform_publisher" name="kraft_camleftint_tf_broadcaster"
      args="-.22 1.18 .91 1.57079632679 0 1.57079632679 Base CameraLeftInt 10" />

    <node pkg="tf" type="static_transform_publisher" name="kraft_camleft_tf_broadcaster"
      args="0 0 0 0 -0.698 0.698 CameraLeftInt CameraLeft 10" />

    <!-- tf for optitrack data where vicon is base frame -->
    <node pkg="tf" type="static_transform_publisher" name="orbslam_tf_broadcaster"
      args="0 0 0 1.57079632679 -1.57079632679 0 CameraLeft OrbSlamMap 10" />

    <node pkg="tf2_ros" type="static_transform_publisher" name="cam_left_tf_broadcaster"
      args="0.721 -0.337 1.550 0.50060862 0.78725068 -0.31436865 0.17549846 CameraLeft map" />

    <!-- <node pkg="tf2_ros" type="static_transform_publisher" name="vicon_tf_broadcaster"
      args="0 0 0 0 0 0 1 map vicon" /> -->

    <!-- <node pkg="tf2_ros" type="static_transform_publisher" name="kinect_tf_broadcaster"
      args="1.134281 0.430836 1.299202 0.90648669 -0.16905275 -0.08057672 0.37843152 vicon kinect2_rgb_optical_frame" /> -->

      <!-- <node pkg="tf2_ros" type="static_transform_publisher" name="kraft_tf_broadcaster"
      args="-0.116819418967 0.0193164013326 0.0492498911917 0 0 0 -1 Optitracks Base" /> -->

  </group>
</launch>
